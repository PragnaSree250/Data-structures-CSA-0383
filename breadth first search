#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Queue data structure for BFS
struct Queue {
    int items[MAX_VERTICES];
    int front;
    int rear;
};

// Graph representation using adjacency matrix
struct Graph {
    int vertices;
    int adjMatrix[MAX_VERTICES][MAX_VERTICES];
};

// Queue functions
struct Queue* createQueue();
void enqueue(struct Queue* queue, int value);
int dequeue(struct Queue* queue);
int isEmpty(struct Queue* queue);

// Graph functions
struct Graph* createGraph(int vertices);
void addEdge(struct Graph* graph, int source, int destination);
void bfs(struct Graph* graph, int startVertex);

int main() {
    struct Graph* graph = createGraph(6);

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 5);
    addEdge(graph, 4, 5);

    printf("Breadth First Traversal starting from vertex 0:\n");
    bfs(graph, 0);

    return 0;
}

// Queue functions
struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = -1;
    queue->rear = -1;
    return queue;
}

void enqueue(struct Queue* queue, int value) {
    if (queue->rear == MAX_VERTICES - 1)
        printf("Queue is full\n");
    else {
        if (queue->front == -1)
            queue->front = 0;
        queue->rear++;
        queue->items[queue->rear] = value;
    }
}

int dequeue(struct Queue* queue) {
    int item;
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        item = -1;
    } else {
        item = queue->items[queue->front];
        queue->front++;
        if (queue->front > queue->rear) {
            queue->front = queue->rear = -1;
        }
    }
    return item;
}

int isEmpty(struct Queue* queue) {
    return queue->front == -1;
}

// Graph functions
struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->vertices = vertices;

    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph->adjMatrix[i][j] = 0;
        }
    }
    return graph;
}

void addEdge(struct Graph* graph, int source, int destination) {
    graph->adjMatrix[source][destination] = 1;
    graph->adjMatrix[destination][source] = 1;
}

void bfs(struct Graph* graph, int startVertex) {
    struct Queue* queue = createQueue();
    int visited[MAX_VERTICES] = {0}; // Initialize all vertices as not visited

    visited[startVertex] = 1; // Mark the starting vertex as visited
    enqueue(queue, startVertex); // Enqueue the starting vertex

    while (!isEmpty(queue)) {
        int currentVertex = dequeue(queue);
        printf("%d ", currentVertex);

        for (int i = 0; i < graph->vertices; i++) {
            if (graph->adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                enqueue(queue, i);
                visited[i] = 1;
            }
        }
    }

    printf("\n");
}
